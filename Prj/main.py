from tkinter import Tk     
from tkinter.filedialog import askopenfilename

# we don't want a full GUI, so keep the root window from appearing
#Tk().withdraw() 
# show an "Open" dialog box and return the path to the selected file
#filename = askopenfilename()
#print(filename)

#with open(filename, 'r') as xml_f:

# --    Create the lammps input file --
import os
import os.path


with open('in.lmp', 'w') as f_in:
    f_in.write('# Agent Based Simulation Of Biological Systems\n\n')
    f_in.write(
        """
        #       --- SET UP OF INPUT VARIABLES ---\n

        # rnseed : int = seed for random numbers\n
        variable rnseed index 10\n
        variable probability equal random(0,1,${rnseed})\n

        # duration : int = N number of steps for the current run\n
        variable time_value index 50  #default value\n
        variable duration equal ${time_value}\n

        # atoms : int = N number of atoms of each type to generate \n
        variable num_atoms index 5\n
        variable atoms equal ${num_atoms}\n

        """
    )
    f_in.write(
        """
        #       --- SIMULATION BOX PROPERTIES ---\n

        # sym measure units and atoms style\n
        units       lj\n
        atom_style  full \n

        # box dimension, boudaries and structure\n
        dimension   3  \n
        boundary    f f f \n
        lattice     fcc 3.52\n

        # flag2 = on or off for bonded interactions\n
        newton on off\n

        # define simulation box\n
        region      box block 0 30 0 30 0 30\n
        create_box  3 box  bond/types 1 extra/bond/per/atom 10\n

        # create simulation walls\n
        fix xwalls all wall/reflect xlo EDGE xhi EDGE\n
        fix ywalls all wall/reflect ylo EDGE yhi EDGE\n
        fix zwalls all wall/reflect zlo EDGE zhi EDGE\n

        """
    )
    f_in.write(
        """
        #       --- ATOMS PROPRETIES AND FORCE FIELDS ---\n
        
        # creation of atoms of 2 types in randoms spots\n
        create_atoms    1 random ${atoms} 5783 box\n
        create_atoms    2 random ${atoms} 7483 box\n
        
        # atoms mass\n
        mass 1 10.948\n
        mass 2 10.467\n
        mass 3 10.578   # new atoms generated by type 1-2 bond\n
        
        # assing atoms to cerian groups\n
        group g1 type 1 \n
        group g2 type 2\n
        group agents  union g1 g2\n
        
        # force fields style and coefficient\n
        pair_style zero 5.0\n
        pair_coeff * *\n
        
        # bond style and coefficients\n
        bond_style  harmonic\n
        bond_coeff * 100 1.1\n
        
        """
    )
    f_in.write(
        """
        #       --- SIMULATION ---\n
        
        # set time steps \n
        timestep 0.01   # seconds\n
        
        # This command sets parameters that affect
        # the building of pairwise neighbor lists\n
        neighbor 0.001 bin\n
        neigh_modify every 10 delay 100\n
        
        # print thermodinamic inf every N timesteps\n
        thermo 100\n
        
        # fix ID group-ID bond/create Nevery itype jtype Rmin bondtype keyword values\n
        # this fix will attempt to create new bond btw atoms of 
        # type 1 and 2 every Nevery timestep\n
        fix bonds all bond/create 10 1 2 1.0 1 prob 0.5 85784\n
        
        # set velocity for all atoms\n
        velocity all create 300.0 4928459 rot yes dist gaussian \n
        
        # perform plain time integration 
        # to update position and velocity
        # and simulate Brownioan motion\n
        fix 1 all nve\n
        fix 2 all langevin 300.0 300.0 10.0 904297\n
        
        # compute if atoms has a bonds
        # and total number of bonds btw all atoms\n
        compute 1 agents property/atom nbonds\n
        compute 2 agents reduce sum c_1            \n
        thermo_style custom step temp pe c_2\n
        run 0\n
        # this lines are necessary to insure that the “hasbond” and "newatoms" 
        # variables are current when the group command invokes it.\n
        
        # hasbond : boolean = true if atom I has a bond with atom J\n
        variable hasbond atom "c_1 > 0.0"\n
        
        # bondcounter : int = N total number of bonds in the sim\n
        variable bondcounter equal ceil(c_2) \n
        
        # print themo info every timestep \n
        thermo_style custom step temp pe v_bondcounter\n
        
        # dumps atoms information \n
        dump 1 all custom 10 dump.out id x y z type \n
        
        """
    )
    f_in.write(
        """
        #       --- LOOP---\n
        
        label loop\n
        variable step loop ${duration}   # loop length\n
        
        # create new atoms only if new bonds have been made 
        # the num of new atoms is linked to the number of new bonds as follow:\n
        variable newatoms equal floor(${bondcounter}/2)\n
        if "${bondcounter} > 0" then &
        "fix depositatoms all deposit ${newatoms} 3 1 5748 region box near 2.0" \n
        # fix ID group-ID deposit N type M seed keyword values\n
        
        # assing all atoms that have a bond to the garbage group\n
        group garbage dynamic all every 1 var hasbond\n
        
        # append new values on dump file\n
        dump_modify 1 append yes\n
        
        # perform n steps in loop\n
        run 100\n
        
        # delate all atoms in garbage\n
        delete_atoms group garbage bond yes mol yes\n
        
        # jump to loop lable until step > 0 \n
        next step\n
        jump SELF loop\n
        
        # end of loop\n
        label break\n
        
        # check on input variables\n
        variable total_atoms equal ${num_atoms}*2\n
        print ""\n
        print "Starting Atoms: ${total_atoms}" \n
        print "Duration: ${duration}"\n
        print "ALL DONE"\n
        """
    )
    f_in.flush()
    os.fsync(f_in)

os.system('./run.sh -o dump.out in.lmp')


